package allapis.springbootsoap.com;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.4.5
 * 2025-02-17T15:41:53.527+05:30
 * Generated source version: 3.4.5
 *
 */
@WebServiceClient(name = "allServiceSoapHttpService",
                  wsdlLocation = "file:/C:/Users/shubham.soni/Downloads/SoapEmployees-master/src/main/resources/employees.wsdl",
                  targetNamespace = "com.springbootsoap.allapis")
public class AllServiceSoapHttpService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("com.springbootsoap.allapis", "allServiceSoapHttpService");
    public final static QName AllServiceSoapHttpSoap11 = new QName("com.springbootsoap.allapis", "allServiceSoapHttpSoap11");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/shubham.soni/Downloads/SoapEmployees-master/src/main/resources/employees.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(AllServiceSoapHttpService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/shubham.soni/Downloads/SoapEmployees-master/src/main/resources/employees.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public AllServiceSoapHttpService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public AllServiceSoapHttpService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AllServiceSoapHttpService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public AllServiceSoapHttpService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public AllServiceSoapHttpService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public AllServiceSoapHttpService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns AllServiceSoapHttp
     */
    @WebEndpoint(name = "allServiceSoapHttpSoap11")
    public AllServiceSoapHttp getAllServiceSoapHttpSoap11() {
        return super.getPort(AllServiceSoapHttpSoap11, AllServiceSoapHttp.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AllServiceSoapHttp
     */
    @WebEndpoint(name = "allServiceSoapHttpSoap11")
    public AllServiceSoapHttp getAllServiceSoapHttpSoap11(WebServiceFeature... features) {
        return super.getPort(AllServiceSoapHttpSoap11, AllServiceSoapHttp.class, features);
    }

}
